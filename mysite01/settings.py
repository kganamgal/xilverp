"""
Django settings for mysite01 project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n3=y7l-^ighwaxd-#(i58z6a@y%zx4thrvodm67v_xr#s4z&gx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SESSION_SAVE_EVERY_REQUEST = True
CSRF_USE_SESSIONS = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'bootstrap_admin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'online',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'mysite01.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite01.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'erp',
        'USER': 'root',
        'PASSWORD': '44332211',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
# Django添加静态文件设置
# STATIC_URL = '/statics/'
# STATIC_ROOT= os.path.join(BASE_DIR, 'statics')
# STATICFILES_DIRS = (
#      os.path.join(BASE_DIR, 'app01/statics'),
# )
# TEMPLATE_DIRS = (
#     os.path.join(BASE_DIR, 'templates'),
# )
# 自己app下添加一个statics文件夹页面引用
# <img src="/statics/images/1.jpg"

STATIC_URL = '/statics/'
# 页面引用 <img src="/statics/images/1.jpg"
STATIC_ROOT = os.path.join(BASE_DIR, 'statics')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'online/statics'),
)


LOGGING = {
    # 日志记录（when where who how what）
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(levelname)s %(asctime)s %(message)s',
        },
    },
    'handlers': {
        'read': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'online/log/read.log',
        },
        'write': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'online/log/write.log',
        },
        'delete': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'online/log/delete.log',
        },
        'login_out': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'online/log/login_out.log',
        },
    },
    'loggers': {
        'read': {
            'handlers': ['read'],
            'level': 'INFO',
            'propagate': True,
        },
        'write': {
            'handlers': ['write'],
            'level': 'INFO',
            'propagate': True,
        },
        'delete': {
            'handlers': ['delete'],
            'level': 'INFO',
            'propagate': True,
        },
        'login_out': {
            'handlers': ['login_out'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
